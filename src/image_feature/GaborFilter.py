import numpy as np
import pandas as pd
from skimage.filter import gabor_kernel
from scipy import ndimage as nd

__author__ = 'Kern'

feature_name_mean = 'Gabor_Mean{0}'
feature_name_variance = 'Gabor_Var{0}'


def generate_kernels(num):
    kernels = []
    for theta in range(num):
        theta = theta / num * np.pi
        for sigma in (1, 3):
            for frequency in (0.05, 0.25):
                kernel = np.real(gabor_kernel(frequency, theta=theta, sigma_x=sigma, sigma_y=sigma))
                kernels.append(kernel)

    return kernels


def compute_feats(image, kernels):
    """
    compute the texture feature by Gabor filter
    :param image: is just numpy array
    :param kernels: list of kernel as [k1, k2, k3 ... ], which is generated by the function above
    :return: numpy array [[mean1, var1], [mean2, var2], [mean3, var3] ... ] stand for mean and variance result of Gabor filter by different kernels [k1, k2, k3 ... ]
    """
    feat_dict = {}
    for idx, kernel in enumerate(kernels):
        filtered = nd.convolve(image, kernel, mode='wrap')
        feat_dict[feature_name_mean.format(idx)] = filtered.mean()
        feat_dict[feature_name_variance.format(idx)] = filtered.var()
    return pd.Series(feat_dict)


