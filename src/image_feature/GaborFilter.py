import numpy as np
import pandas as pd
from skimage.filters import gabor_kernel
from scipy import ndimage as nd

__author__ = 'Kern'

feature_method_name = 'Gabor'
feature_name_mean = 'mean{0}'
feature_name_variance = 'var{0}'


def generate_kernels(num):
    kernels = []
    for theta in range(num):
        theta = theta / float(num) * np.pi
        for sigma in (1, 3):
            for frequency in (0.05, 0.25):
                kernel = np.real(gabor_kernel(frequency, theta=theta, sigma_x=sigma, sigma_y=sigma))
                kernels.append(kernel)
    return kernels


def generate_kernel(frequency, theta, sigma):
    return np.real(gabor_kernel(frequency, theta=theta, sigma_x=sigma, sigma_y=sigma))


def compute_feats(image, kernels):
    """
    compute the texture feature by Gabor filter
    :param image: is just numpy array
    :param kernels: list of kernel as [k1, k2, k3 ... ], which is generated by the function above
    :return: [[mean1, var1], [mean2, var2], [mean3, var3] ... ] stand for mean and variance result of Gabor filter by different kernels [k1, k2, k3 ... ], wrapped by pandas.Series
    """
    data = []
    label_l2 = []
    for idx, kernel in enumerate(kernels):
        filtered = nd.convolve(image, kernel, mode='wrap')

        data.append(filtered.mean())
        label_l2.append(feature_name_mean.format(idx))

        data.append(filtered.var())
        label_l2.append(feature_name_variance.format(idx))

    label_l1 = [feature_method_name] * len(data)
    index = pd.MultiIndex.from_tuples(list(zip(label_l1, label_l2)), names=['method', 'attr'])

    return pd.Series(data, index)
